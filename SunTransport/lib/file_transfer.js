// Generated by CoffeeScript 1.6.3
(function() {
  var FileTransferHandler, FormData, http, request, requestWithRedirect, sanitizeRedirect, throttle, transfer, util;

  util = require('util');

  http = require('http');

  request = require('request');

  FormData = require('form-data');

  throttle = require('./throttle');

  exports.FileTransferHandler = FileTransferHandler = function() {
    this.retryCounts = {};
    this.throttler = new throttle.Throttler(2);
    return this;
  };

  FileTransferHandler.prototype.handleTask = function(task) {
    var self;
    self = this;
    util.log("Throttling Transfer: " + task.params.downloadUrl);
    return this.throttler.add(function(done) {
      var params;
      params = task.params;
      return self.transfer(params.downloadUrl, params.uploadUrl, params.auth, function(success) {
        if (success) {
          task.done();
        } else {
          self.retry(task);
        }
        return done();
      });
    });
  };

  FileTransferHandler.prototype.transfer = function(downloadUrl, uploadUrl, auth, callback) {
    var self;
    self = this;
    util.log("Starting Transfer: " + downloadUrl);
    return transfer(downloadUrl, uploadUrl, auth, callback, function(progress) {
      return self.onProgress(downloadUrl, progress);
    });
  };

  FileTransferHandler.prototype.onProgress = function(downloadUrl, progress) {
    return util.log("Transfer: " + downloadUrl + '[' + progress + ']');
  };

  FileTransferHandler.prototype.retry = function(task) {
    var retryCount;
    retryCount = this.retryCounts[task.id] || 0;
    if (retryCount < 5) {
      task.retry(60);
      return this.retryCounts[task.id] = retryCount + 1;
    } else {
      return task.done();
    }
  };

  transfer = function(downloadUrl, uploadUrl, auth, callback, updateProgress) {
    return requestWithRedirect(downloadUrl, function(response) {
      var form;
      if (!response) {
        return callback(false);
      }
      form = new FormData();
      if (auth) {
        form.append('auth', auth);
      }
      form.append('file', response);
      return form.getLength(function(err, length) {
        var bytesReceived, lastUpdateTime, put;
        util.log("Content-Length: " + length);
        put = request.put(uploadUrl, function(error, response, body) {
          if (!error && response.statusCode === 200) {
            util.log("Done uploading to: " + uploadUrl);
            updateProgress(100);
            return callback(true);
          }
        });
        put.setHeader('Content-Length', length);
        put._form = form;
        bytesReceived = 0;
        lastUpdateTime = 0;
        return response.on('data', function(chunk) {
          var progress, uptime;
          bytesReceived += chunk.length;
          uptime = process.uptime();
          if (bytesReceived === length) {
            return updateProgress(99);
          } else if (uptime - lastUpdateTime > 5) {
            progress = Math.floor(bytesReceived * 100 / length);
            lastUpdateTime = uptime;
            return updateProgress(progress);
          }
        });
      });
    });
  };

  requestWithRedirect = function(url, callback) {
    return http.get(url, function(response) {
      var location;
      if (response.statusCode === 302) {
        location = sanitizeRedirect(response.headers.location);
        return requestWithRedirect(location, callback);
      } else if (response.statusCode === 200) {
        return callback(response);
      } else {
        util.log('Failed to request url: ' + url);
        return callback();
      }
    }).on('error', function(e) {
      util.log("Http error: " + e.message);
      return callback();
    });
  };

  sanitizeRedirect = function(url) {
    return url.split("?")[0];
  };

}).call(this);
